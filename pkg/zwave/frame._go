package zwave

import "fmt"

type DataFrame struct {
	SOF              byte
	Length           byte
	Type             byte // REQ: 0x00 RES: 0x01
	ApiCommand       byte
	ApiCommandParams []byte
	Checksum         byte
}

func NewRequest(command byte, params ...byte) *DataFrame {
	f := &DataFrame{
		SOF:              0x01,
		Length:           byte(len(params) + 3),
		Type:             0x00,
		ApiCommand:       command,
		ApiCommandParams: params,
	}
	f.Checksum = f.CalculateChecksum()
	return f
}

func (f *DataFrame) CalculateChecksum() byte {
	data := []byte{0x00, f.Length, f.Type, f.ApiCommand, 0x00}
	data = append(data, f.ApiCommandParams...)

	var offset int
	ret := data[offset]
	for i := offset + 1; i < len(data)-1; i++ {
		// Xor bytes
		ret ^= data[i]
	}
	// Not result
	ret = (byte)(^ret)
	return ret
}

func (f *DataFrame) Message() []byte {
	data := []byte{f.SOF, f.Length, f.Type, f.ApiCommand}
	data = append(data, f.ApiCommandParams...)
	data = append(data, f.Checksum)
	return data
}

func Decode(data []byte) (length int, msg *DataFrame, err error) {
	return -1, nil, fmt.Errorf("error")
}
